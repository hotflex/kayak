{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is the documentation home for Kayak, Rotriever-style package manager for Roblox. This documentation is a continual work in progress. If you find any issues, please open an issue New to Kayak? Check out Installation or Why Kayak? . Note Kayak is designed for Rojo users who have general technical knowledge. \u26a0 This package is still a work in progress. I cannot guarantee its stability and it is not ready for use in production.","title":"Home"},{"location":"help/","text":"Kayak may seem like a complex tool, but it's actually quite simple! If you find anything that looks like a bug or have ideas for how to improve Kayak, please feel free to open an issue ! The Roblox Open Source Community Discord is a good place to get help with Rojo and Kayak; questions about kayak are best suited for the #general channel. Kayak's creator and primary maintainer is also available on Twitter and Discord (Elliott#1337) .","title":"Get help with Kayak"},{"location":"why-kayak/","text":"Managing dependencies is very complicated. Roblox developers generally use Git Submodules , however, this is not a perfect solution for a few reasons: Git Submodules does not cleanly handle dependencies; meaning your dependencies will be included multiple times. Git Submodules can be really annoying in general. Git Submodules isn't a package manager. Roblox engineers have created their own package manager called \"Rotriever\". However, due to internal obstacles, it has not been released yet. Kayak is designed to mimic the behaviour of Rotriever until it is released.","title":"Why Kayak"},{"location":"advanced/package-links/","text":"Package links help prevent packages from being repeated over and over, while still maintaining convenience. Package links are inserted in a few places, namely: - In the dependencies_root - In the package index folder, to link to dependencies. Package links will link to the actual package in the _index .","title":"Package links"},{"location":"advanced/proxies/","text":"Proxies are coming soon! See #2 .","title":"Proxies"},{"location":"guide/dependencies/","text":"The main reason you're using a package manager is likely because of dependencies. Your rotriever.toml file will declare what dependencies your package requires, and these dependencies will be included by Kayak for you! Declaring dependencies \u00b6 Let's go to my-awesome-package 's rotriever.toml file and make some changes! Let's add the following to our rotriever.toml: [ dependencies ] Roact = { git = \"https://github.com/roblox/roact.git\" } Note For this guide, we'll be using Roact as an example dependency; however, you can use any repository so long as it has a valid rotriever.toml file in its root. Accessing dependencies \u00b6 In our script, dependencies are included in the 'root' of our package. Here's an example tree: my-package Roact (this is where our package is outputted using the name we specified) my-awesome-package (this is where our `content_root` will be) Now we've added our dependency, we can use it! local module = {} + local Roact = require(script.Parent.Roact) function module:GetAwesomeness() return \"Very awesome!\" end return module Warning Dependencies can't use dependencies_root , that's only respected if you're running the kayak pull command for your package. In other words, dependencies_root is only for the top-level package. Branches \u00b6 Sometimes you'll need to pull a specific branch for your package, here's how. We'll change our dependency definition from a string to an object. We'll use git to specify the repository, and rev to specify our branch. This is what it looks like: [dependencies] Roact = \"https://github.com/roblox/roact.git\" My-Branched-Package = { git = \"https://github.com/me/branched-package.git\" , rev = \"my-branch\" }","title":"Dependencies"},{"location":"guide/dependencies/#declaring-dependencies","text":"Let's go to my-awesome-package 's rotriever.toml file and make some changes! Let's add the following to our rotriever.toml: [ dependencies ] Roact = { git = \"https://github.com/roblox/roact.git\" } Note For this guide, we'll be using Roact as an example dependency; however, you can use any repository so long as it has a valid rotriever.toml file in its root.","title":"Declaring dependencies"},{"location":"guide/dependencies/#accessing-dependencies","text":"In our script, dependencies are included in the 'root' of our package. Here's an example tree: my-package Roact (this is where our package is outputted using the name we specified) my-awesome-package (this is where our `content_root` will be) Now we've added our dependency, we can use it! local module = {} + local Roact = require(script.Parent.Roact) function module:GetAwesomeness() return \"Very awesome!\" end return module Warning Dependencies can't use dependencies_root , that's only respected if you're running the kayak pull command for your package. In other words, dependencies_root is only for the top-level package.","title":"Accessing dependencies"},{"location":"guide/dependencies/#branches","text":"Sometimes you'll need to pull a specific branch for your package, here's how. We'll change our dependency definition from a string to an object. We'll use git to specify the repository, and rev to specify our branch. This is what it looks like: [dependencies] Roact = \"https://github.com/roblox/roact.git\" My-Branched-Package = { git = \"https://github.com/me/branched-package.git\" , rev = \"my-branch\" }","title":"Branches"},{"location":"guide/games/","text":"You're probably gonna need a lot of dependencies in a game; thankfully, Kayak was designed with Roblox games in mind. We'll need to add a dependencies_root to our rotriever.toml file, and remove our content_root . This is because games work slightly differently. Here's what our rotriver.toml will look like: [package] name = \"my-awesome-game\" author = \"me\" license = \"\" version = \"0.1.0\" dependencies_root = \"./packages\" This means that all our dependencies will be outputted in the packages folder. Adding some dependencies \u00b6 Let's add a few dependencies. We cover this more in our dependencies tutorial. [package] name = \"my-awesome-game\" author = \"me\" license = \"\" version = \"0.1.0\" dependencies_root = \"./packages\" + [dependencies] + Roact = \"https://github.com/roblox/roact.git\" + Rodux = \"https://github.com/roblox/rodux.git\" + Roact-Rodux = \"https://github.com/roblox/roact-rodux.git\" Pulling our dependencies \u00b6 Assuming you've installed Kayak , we can run the kayak pull command in our game's folder. All goes well, it'll pull our packages and put them into our dependencies_root . Accessing our dependencies \u00b6 It's up to you to add the dependencies_root to your Rojo tree; we suggest adding it to ReplicatedStorage.Packages We can access our dependencies with this format: -- Only our specified dependencies will be in the root of \"Packages\", we can find them by their -- specified name. local Roact = require ( ReplicatedStorage . Packages . Roact ) Package Indexes \u00b6 The _index folder inside of our dependencies_root will house all of the packages. The package folder will be named based on what the package itself is named as. Inside of the folder, we'll find the package's content_root and links to any dependencies of the package.","title":"Using Kayak in Games"},{"location":"guide/games/#adding-some-dependencies","text":"Let's add a few dependencies. We cover this more in our dependencies tutorial. [package] name = \"my-awesome-game\" author = \"me\" license = \"\" version = \"0.1.0\" dependencies_root = \"./packages\" + [dependencies] + Roact = \"https://github.com/roblox/roact.git\" + Rodux = \"https://github.com/roblox/rodux.git\" + Roact-Rodux = \"https://github.com/roblox/roact-rodux.git\"","title":"Adding some dependencies"},{"location":"guide/games/#pulling-our-dependencies","text":"Assuming you've installed Kayak , we can run the kayak pull command in our game's folder. All goes well, it'll pull our packages and put them into our dependencies_root .","title":"Pulling our dependencies"},{"location":"guide/games/#accessing-our-dependencies","text":"It's up to you to add the dependencies_root to your Rojo tree; we suggest adding it to ReplicatedStorage.Packages We can access our dependencies with this format: -- Only our specified dependencies will be in the root of \"Packages\", we can find them by their -- specified name. local Roact = require ( ReplicatedStorage . Packages . Roact )","title":"Accessing our dependencies"},{"location":"guide/games/#package-indexes","text":"The _index folder inside of our dependencies_root will house all of the packages. The package folder will be named based on what the package itself is named as. Inside of the folder, we'll find the package's content_root and links to any dependencies of the package.","title":"Package Indexes"},{"location":"guide/installation/","text":"Prerequisites \u00b6 You'll need node and npm installed to use Kayak. Check the package.json (under engines ) for the ideal version for Kayak. Method 1: Install package from NPM \u00b6 npm i -g kayak That simple. Kayak has now been installed, and can be used. Method 2: Manual install \u00b6 This method is designed for development. Pull the package from GitHub ( git clone https://github.com/elliottlmz/kayak.git ) Open the command line in the package directory Run npm link kayak can now be used on the command line. Note that this may create some issues if you have kayak installed via npm and installed manually.","title":"Installation"},{"location":"guide/installation/#prerequisites","text":"You'll need node and npm installed to use Kayak. Check the package.json (under engines ) for the ideal version for Kayak.","title":"Prerequisites"},{"location":"guide/installation/#method-1-install-package-from-npm","text":"npm i -g kayak That simple. Kayak has now been installed, and can be used.","title":"Method 1: Install package from NPM"},{"location":"guide/installation/#method-2-manual-install","text":"This method is designed for development. Pull the package from GitHub ( git clone https://github.com/elliottlmz/kayak.git ) Open the command line in the package directory Run npm link kayak can now be used on the command line. Note that this may create some issues if you have kayak installed via npm and installed manually.","title":"Method 2: Manual install"},{"location":"guide/packages/","text":"Packages are crucial to Kayak. They define data about what a package is, and most importantly, what other packages it depends on. Creating a Package file \u00b6 Note In this tutorial, we go over the basics of packages and dependencies. We talk about using Kayak in a game later on. In our project root, we'll create a file called rotriever.toml . TOML is a language for storing configuration in an easy to read way. You can learn more about it here . We'll put the following in our package. Don't worry if it's confusing, we'll explain how it all works: [package] name = \"my-awesome-package\" author = \"me\" license = \"\" version = \"1.0.0\" So let's break this down! name : This is the name of our package. While you can put anything in here, special characters will be crushed to underscores when being loaded in the file system. This is required author : The creator of the package! This currently isn't required, and has no purpose in Kayak, but it's good to include. license : The license the package is released under. Again, this is optional; but it'd be good to include (even if it's just See LICENSE.md !) version : The SemVer of this package. This is required, and you need to follow the semver format! Creating some code \u00b6 Now we've defined our package, it's time to write some code. While you normally can put all of your lua code in the root (aka workspace), it's not ideal but more importantly, you can't do this with Kayak! A folder with your source (called a content root) is required for Kayak to be able to understand your package and make sure that the lua code used in games is the actual code , not various stuff you may need in development, testing, etc. We'll add to our package the following line: content_root = \"./src\" Our package file will now look like this: [package] name = \"my-awesome-package\" author = \"me\" license = \"\" version = \"1.0.0\" content_root = \"./src\" We're telling Kayak that all our code can be found in the src folder, so let's create it! Writing our code \u00b6 We'll add an init.lua file, this means that my-awesome-package will be made into a Roblox ModuleScript via Rojo. Here's what we'll put in our module: local module = {} function module : GetAwesomeness () return \"Very awesome!\" end return module Publishing our package \u00b6 Kayak, at it's heart, uses Git as a package index/registry. While proxies are a feature, they're beyond the scope of this introduction guide. We're not going to go over how to create and setup a Git repository; but we'll be using GitHub as our 'remote' for this tutorial. Using our package \u00b6 Once our package has been published, it can now be used! We go over using packages in games and package dependencies later on in the guide.","title":"Package Basics"},{"location":"guide/packages/#creating-a-package-file","text":"Note In this tutorial, we go over the basics of packages and dependencies. We talk about using Kayak in a game later on. In our project root, we'll create a file called rotriever.toml . TOML is a language for storing configuration in an easy to read way. You can learn more about it here . We'll put the following in our package. Don't worry if it's confusing, we'll explain how it all works: [package] name = \"my-awesome-package\" author = \"me\" license = \"\" version = \"1.0.0\" So let's break this down! name : This is the name of our package. While you can put anything in here, special characters will be crushed to underscores when being loaded in the file system. This is required author : The creator of the package! This currently isn't required, and has no purpose in Kayak, but it's good to include. license : The license the package is released under. Again, this is optional; but it'd be good to include (even if it's just See LICENSE.md !) version : The SemVer of this package. This is required, and you need to follow the semver format!","title":"Creating a Package file"},{"location":"guide/packages/#creating-some-code","text":"Now we've defined our package, it's time to write some code. While you normally can put all of your lua code in the root (aka workspace), it's not ideal but more importantly, you can't do this with Kayak! A folder with your source (called a content root) is required for Kayak to be able to understand your package and make sure that the lua code used in games is the actual code , not various stuff you may need in development, testing, etc. We'll add to our package the following line: content_root = \"./src\" Our package file will now look like this: [package] name = \"my-awesome-package\" author = \"me\" license = \"\" version = \"1.0.0\" content_root = \"./src\" We're telling Kayak that all our code can be found in the src folder, so let's create it!","title":"Creating some code"},{"location":"guide/packages/#writing-our-code","text":"We'll add an init.lua file, this means that my-awesome-package will be made into a Roblox ModuleScript via Rojo. Here's what we'll put in our module: local module = {} function module : GetAwesomeness () return \"Very awesome!\" end return module","title":"Writing our code"},{"location":"guide/packages/#publishing-our-package","text":"Kayak, at it's heart, uses Git as a package index/registry. While proxies are a feature, they're beyond the scope of this introduction guide. We're not going to go over how to create and setup a Git repository; but we'll be using GitHub as our 'remote' for this tutorial.","title":"Publishing our package"},{"location":"guide/packages/#using-our-package","text":"Once our package has been published, it can now be used! We go over using packages in games and package dependencies later on in the guide.","title":"Using our package"}]}